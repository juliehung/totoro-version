cache:
    key: "$CI_PIPELINE_ID"
    paths:
        - node_modules
        - .gradle/wrapper
        - .gradle/caches

stages:
    - build
    - test
    - package
    - release
    - deploy
    - operation

before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x gradlew

# build stage
buildByGradle:
    stage: build
    only:
        - merge_requests
    image: openjdk:8-jdk-stretch
    script:
        - ./gradlew compileJava -x check --no-daemon

# test stage
testRegular:
    stage: test
    only:
        - merge_requests
    image: openjdk:8-jdk-stretch
    services:
        - postgres:10.4
    variables:
        POSTGRES_DB: totoro
        POSTGRES_USER: totoro
        POSTGRES_PASSWORD: totoro
    script:
        - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/totoro ./gradlew test --no-daemon
    artifacts:
        paths:
            - build/reports/tests/*
            - build/jacocoHtml/*

testFTP:
    stage: test
    only:
        - merge_requests
    image: openjdk:8-jdk-stretch
    services:
        - postgres:10.4
    variables:
        POSTGRES_DB: totoro
        POSTGRES_USER: totoro
        POSTGRES_PASSWORD: totoro
    script:
        - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/totoro TTR_F_U=localhost TTR_F_A=user TTR_F_S=password TTR_F_T_P=56047 TTR_F_B_P=55536 TTR_F_P=21 ./gradlew test -PtestFtp --tests io.dentall.totoro.business.service.ImageFtpBusinessServiceIntTest --no-daemon

testPackage:
    stage: package
    only:
        - merge
    except:
        - /^(\d)+-.*$/
    image: openjdk:8-jdk-stretch
    script:
        - apt-get install -y --no-install-recommends curl unzip
        - apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated gcc make libpng-dev
        - git checkout $CI_COMMIT_REF_SLUG
        - ./gradlew bootWar -Pprod -x check -PnodeInstall --no-daemon
    artifacts:
        paths:
            - build/*

# package stage
repackageByGradle:
    stage: package
    only:
        - tags
    except:
        - /^(\d)+-.*$/
    image: openjdk:8-jdk-stretch
    script:
        - apt-get install -y --no-install-recommends curl unzip
        - apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated gcc make libpng-dev
        - git checkout $CI_COMMIT_TAG
        - ./gradlew bootWar -Pprod -x check -PnodeInstall --no-daemon
    artifacts:
        paths:
            - build/*

# release stage
releaseWarToFirebaseStorage:
    stage: release
    only:
        - tags
    dependencies:
        - repackageByGradle
    image: google/cloud-sdk:alpine
    script:
        - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - gsutil cp build/libs/* gs://dentall-admin-auto-update/

releaseImageToGitlabRegistry:
    stage: release
    only:
        - tags
    except:
        - /^(\d)+-.*$/
    dependencies:
        - repackageByGradle
    image: docker
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay
    script:
        - apk add --update make nss git openjdk8-jre
        - war_path=build/libs/*.war
        - filename=$(basename $war_path .war)
        - version=${filename##*-}
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - git checkout $CI_COMMIT_TAG
        - ./gradlew -Pprod jib --image=registry.gitlab.com/dentall/totoro-admin:$CI_COMMIT_TAG -Djib.to.auth.username=gitlab-ci-token -Djib.to.auth.password=$CI_JOB_TOKEN -x processResources -x compileJava -x check --no-daemon

releaseImageToGCPRegistry:
    stage: release
    only:
        - tags
    except:
        - /^(\d)+-.*$/
    dependencies:
        - repackageByGradle
    image: docker
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay
    script:
        # Install CA certs, openssl to https downloads, python for gcloud sdk
        - apk add --update make ca-certificates openssl python
        - update-ca-certificates
        # Write our GCP service account private key into a file
        - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        # Download and install Google Cloud SDK
        - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
        - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
        - google-cloud-sdk/bin/gcloud --quiet components update
        - google-cloud-sdk/bin/gcloud --quiet components install beta
        - google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - docker login -u _json_key --password-stdin https://us.gcr.io < ${HOME}/gcloud-service-key.json
        - war_path=build/libs/*.war
        - filename=$(basename $war_path .war)
        - version=${filename##*-}
        - mv build/libs/$filename.war src/main/docker/app.war
        - docker build -t us.gcr.io/$GCP_PROJECT_ID/$CI_PROJECT_NAME:$CI_COMMIT_TAG -f src/main/docker/Dockerfile src/main/docker
        - docker push us.gcr.io/$GCP_PROJECT_ID/$CI_PROJECT_NAME:$CI_COMMIT_TAG

# deploy stage
depolyCloudRun:
    stage: deploy
    only:
        - tags
    except:
        - /^(\d)+-.*$/
    environment:
        name: staging/$CI_COMMIT_REF_SLUG
        url: https://master-cloud-run-vgcfrtzwfa-uc.a.run.app
        on_stop: stopCloudRun
    when: manual
    image: google/cloud-sdk:alpine
    script:
        - versionMajor="$(grep 'versionMajor' build/generated/semver.properties | cut -d'=' -f2)"
        - versionMinor="$(grep -w 'versionMinor' build/generated/semver.properties | cut -d'=' -f2)"
        - commitCount="$(grep 'commitCount' build/generated/semver.properties | cut -d'=' -f2)"
        - gcloud --quiet components update
        - gcloud --quiet components install beta
        - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - gcloud beta auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - gcloud beta run deploy master-cloud-run --image us.gcr.io/$GCP_PROJECT_ID/$CI_COMMIT_REF_SLUG:$versionMajor.$versionMinor.$commitCount --platform managed --region us-central1 --async --allow-unauthenticated --set-env-vars ^#^_JAVA_OPTIONS="-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Xmx${GCP_CLOUDRUN_JAVA_MEMORY:-512}m"#SPRING_PROFILES_ACTIVE="prod,embedded-postgres"#JAVA_OPTS="-Dpgembed.shared_buffers=${GCP_CLOUDRUN_PG_BUFFERS:-256}" --memory ${GCP_CLOUDRUN_MEMORY:-2}Gi

depolyAppEngine:
    tags:
        - dentall
    stage: deploy
    only:
        - tags
    except:
        - /^(\d)+-.*$/
    environment:
        name: staging/$CI_COMMIT_REF_SLUG
        url: https://$CI_COMMIT_REF_SLUG-dot-$GCP_PROJECT_ID.appspot.com
        on_stop: stopAppEngine
    when: manual
    dependencies:
        - repackageByGradle
    image: google/cloud-sdk:alpine
    script:
        - versionMajor="$(grep 'versionMajor' build/generated/semver.properties | cut -d'=' -f2)"
        - versionMinor="$(grep -w 'versionMinor' build/generated/semver.properties | cut -d'=' -f2)"
        - commitCount="$(grep 'commitCount' build/generated/semver.properties | cut -d'=' -f2)"
        - gcloud --quiet components update
        - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - 'echo "service: ${CI_COMMIT_REF_SLUG}" >> src/main/appengine/app.yaml'
        - gcloud --quiet app deploy src/main/appengine/app.yaml --version $versionMajor-$versionMinor-$commitCount --image-url us.gcr.io/$GCP_PROJECT_ID/$CI_COMMIT_REF_SLUG:$versionMajor.$versionMinor.$commitCount --promote --stop-previous-version

# operation stage
stopAppEngine:
    tags:
        - dentall
    stage: operation
    only:
        - tags
    except:
        - /^(\d)+-.*$/
    environment:
        name: staging/$CI_COMMIT_REF_SLUG
        action: stop
    when: manual
    image: google/cloud-sdk:alpine
    script:
        - gcloud --quiet components update
        - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - gcloud --quiet app services delete $CI_COMMIT_REF_SLUG

stopCloudRun:
    stage: operation
    only:
        - tags
    except:
        - /^(\d)+-.*$/
    environment:
        name: staging/$CI_COMMIT_REF_SLUG
        action: stop
    when: manual
    image: google/cloud-sdk:alpine
    script:
        - gcloud --quiet components update
        - gcloud --quiet components install beta
        - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        - gcloud beta auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - gcloud --quiet beta run services delete master-cloud-run --platform managed --region us-central1
