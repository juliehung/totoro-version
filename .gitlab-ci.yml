cache:
    key: "$CI_PIPELINE_ID"
    paths:
        - .gradle/wrapper
        - .gradle/caches

stages:
    - test
    - build
    - release
    - deploy
    - notify

before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x gradlew

# test stage
testRegular:
    stage: test
    only:
        refs:
            - merge_requests
        changes:
            - src/**/*
    image: openjdk:8-jdk-stretch
    services:
        - postgres:10.4
    variables:
        POSTGRES_DB: totoro
        POSTGRES_USER: totoro
        POSTGRES_PASSWORD: totoro
    script:
        - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/totoro ./gradlew test --no-daemon

# build stage
testCompile:
    stage: test
    only:
        refs:
            - merge_requests
        changes:
            - src/**/*
    image: openjdk:8-jdk-stretch
    script:
        - ./gradlew compileJava -x check --no-daemon

packageWebIntoWarWhenDev:
    stage: build
    rules:
        - if: '$CI_COMMIT_TAG =~ /^test.*/'
          when: on_success
          allow_failure: false
          variables:
              VERSION_FILE: stg.version.json
#    only:
#        - develop
    image: openjdk:8-jdk-stretch
    script:
        - apt-get install -y --no-install-recommends curl unzip
        - apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated gcc make libpng-dev
        - 'curl --location --output artifact.zip --header "PRIVATE-TOKEN: $GITLAB_TOTORO_WEB_PRIVATE_TOKEN" "https://gitlab.com/api/v4/projects/8544858/jobs/artifacts/develop/download?job=buildArtifact"'
        - unzip artifact.zip -d web/
        - ./gradlew bootWar -Pprod -x check --no-daemon
    artifacts:
        paths:
            - build/*

packageWebIntoWarWhenTag:
    stage: build
    rules:
        - if: '$CI_COMMIT_TAG =~ /^stg.*/'
          when: on_success
          allow_failure: false
          variables:
              VERSION_FILE: stg.version.json
        - if: '$CI_COMMIT_TAG =~ /\d\.\d\.\d/'
          when: on_success
          allow_failure: false
          variables:
              VERSION_FILE: rel.version.json
    image: openjdk:8-jdk-stretch
    before_script:
        - apt-get update -y && apt-get install jq curl git unzip -y
        - apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated gcc make libpng-dev
    script:
        - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/dentall/totoro-version.git
        - totorowebversion=`jq -r '.totoroWeb' totoro-version/$VERSION_FILE`
        - 'curl --location --output artifact.zip --header "PRIVATE-TOKEN: $GITLAB_TOTORO_WEB_PRIVATE_TOKEN" "https://gitlab.com/api/v4/projects/8544858/jobs/artifacts/$totorowebversion/download?job=buildArtifact"'
        - unzip artifact.zip -d web/
        - ./gradlew bootWar -Pprod -x check --no-daemon
    artifacts:
        paths:
            - build/*

# release stage
releaseWarToFirebase:
    stage: release
    rules:
        - if: '$CI_COMMIT_TAG =~ /^stg.*/'
          when: on_success
          allow_failure: false
        - if: '$CI_COMMIT_TAG =~ /\d\.\d\.\d/'
          when: on_success
          allow_failure: false
    dependencies:
        - packageWebIntoWarWhenTag
    image: google/cloud-sdk:alpine
    script:
        - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - gsutil cp build/libs/* gs://dentall-admin-auto-update/

releaseWarToDevMachine:
    stage: release
    rules:
        - if: '$CI_COMMIT_TAG =~ /^stg.*/'
          when: on_success
          allow_failure: true
        - if: '$CI_COMMIT_TAG =~ /\d\.\d\.\d/'
          when: on_success
          allow_failure: true
    dependencies:
        - packageWebIntoWarWhenTag
    image: ubuntu
    before_script:
        # run ssh in job ref https://docs.gitlab.com/ee/ci/ssh_keys/#ssh-keys-when-using-the-docker-executor
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client curl -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo "$DEV_MACHINE_KEY" > /home/dev.key
        - ssh-keyscan dev.dentall.site >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - chmod 700 /home/dev.key
    script:
        - scp -i /home/dev.key ./build/libs/*.war deploy@dev.dentall.site:/home/deploy/dora-monitor/storage/wars

releaseImageToGitlabRegistry:
    stage: release
    rules:
        - if: '$CI_COMMIT_TAG =~ /^stg.*/'
          when: on_success
          allow_failure: true
        - if: '$CI_COMMIT_TAG =~ /\d\.\d\.\d/'
          when: on_success
          allow_failure: true
    dependencies:
        - packageWebIntoWarWhenTag
    image: docker
    services:
        - docker:stable
    variables:
        DOCKER_DRIVER: overlay
    script:
        - apk add --update make nss git openjdk8-jre
        - war_path=build/libs/*.war
        - filename=$(basename $war_path .war)
        - version=${filename##*-}
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - git checkout $CI_COMMIT_TAG
        - ./gradlew -Pprod jib --image=registry.gitlab.com/dentall/totoro-admin:$CI_COMMIT_TAG -Djib.to.auth.username=gitlab-ci-token -Djib.to.auth.password=$CI_JOB_TOKEN -x processResources -x compileJava -x check --no-daemon

releaseImageToGCPRegistry:
    stage: release
    rules:
        - if: '$CI_COMMIT_TAG =~ /^stg.*/'
          when: on_success
          allow_failure: true
        - if: '$CI_COMMIT_TAG =~ /\d\.\d\.\d/'
          when: on_success
          allow_failure: true
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: ""
    image: docker:19.03.12
    dependencies:
        - packageWebIntoWarWhenTag
    services:
        - docker:19.03.12-dind
    before_script:
        - docker info
    script:
        # Write our GCP service account private key into a file
        - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        - cat ${HOME}/gcloud-service-key.json | docker login -u _json_key --password-stdin https://asia.gcr.io
        - war_path=build/libs/*.war
        - filename=$(basename $war_path .war)
        - version=${filename##*-}
        - mv build/libs/$filename.war src/main/docker/app.war
        - docker pull asia.gcr.io/$GCP_PROJECT_ID/$CI_PROJECT_NAME:cache || true
        - docker build --cache-from asia.gcr.io/$GCP_PROJECT_ID/$CI_PROJECT_NAME:cache -t asia.gcr.io/$GCP_PROJECT_ID/$CI_PROJECT_NAME:$CI_COMMIT_TAG -t asia.gcr.io/$GCP_PROJECT_ID/$CI_PROJECT_NAME:cache -f src/main/docker/Dockerfile src/main/docker
        - docker push asia.gcr.io/$GCP_PROJECT_ID/$CI_PROJECT_NAME:$CI_COMMIT_TAG
        - docker push asia.gcr.io/$GCP_PROJECT_ID/$CI_PROJECT_NAME:cache

# deploy stage
deployDevDentall8082:
    variables:
        CURL_CONTENT_TYPE: 'Content-Type: application/json'
        CURL_DATA_FOR_STOP: '{"operation": "stop", "warVersion": "dev.war"}'
        CURL_DATA_FOR_START: '{"operation": "start", "warVersion": "dev.war"}'
    rules:
        -   if: '$CI_COMMIT_TAG =~ /^test.*/'
            when: on_success
            allow_failure: false
#    only:
#        - develop
    stage: deploy
    image: ubuntu
    dependencies:
        - packageWebIntoWarWhenDev
    before_script:
        # run ssh in job ref https://docs.gitlab.com/ee/ci/ssh_keys/#ssh-keys-when-using-the-docker-executor
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client curl -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo "$DEV_MACHINE_KEY" > /home/dev.key
        - ssh-keyscan dev.dentall.site >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - chmod 700 /home/dev.key
    script:
        - scp -i /home/dev.key ./build/libs/*.war deploy@dev.dentall.site:/home/deploy/dora-monitor/storage/wars/dev.war
        - 'curl -X POST http://dev.dentall.site:8001/servers/8082/operation -H "$CURL_CONTENT_TYPE" -d "$CURL_DATA_FOR_STOP"'
        - sleep 1
        - 'curl -X POST http://dev.dentall.site:8001/servers/8082/operation -H "$CURL_CONTENT_TYPE" -d "$CURL_DATA_FOR_START"'

deployDevDentall8085:
    variables:
        CURL_CONTENT_TYPE: 'Content-Type: application/json'
        CURL_DATA_FOR_STOP: '{"operation": "stop", "warVersion": "totoro-$CI_COMMIT_TAG-$CI_COMMIT_SHORT_SHA.war"}'
        CURL_DATA_FOR_START: '{"operation": "start", "warVersion": "totoro-$CI_COMMIT_TAG-$CI_COMMIT_SHORT_SHA.war"}'
        SLACK_INFO: '{"text": "Hey everyone in <!here>, 8085 is ready with version: $CI_COMMIT_TAG"}'
    rules:
        - if: '$CI_COMMIT_TAG =~ /^stg.*/'
          when: on_success
          allow_failure: false
    stage: deploy
    image: ubuntu
    dependencies:
        - packageWebIntoWarWhenTag
    before_script:
        # run ssh in job ref https://docs.gitlab.com/ee/ci/ssh_keys/#ssh-keys-when-using-the-docker-executor
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client curl -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo "$DEV_MACHINE_KEY" > /home/dev.key
        - ssh-keyscan dev.dentall.site >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - chmod 700 /home/dev.key
    script:
        - 'curl -X POST http://dev.dentall.site:8001/servers/8085/operation -H "$CURL_CONTENT_TYPE" -d "$CURL_DATA_FOR_STOP"'
        - sleep 1
        - 'curl -X POST http://dev.dentall.site:8001/servers/8085/operation -H "$CURL_CONTENT_TYPE" -d "$CURL_DATA_FOR_START"'
        - 'curl --location --request POST "$SLACK_INCOMING_HOOK" --header "$CURL_CONTENT_TYPE" --data-raw "$SLACK_INFO"'

deployGcpDev:
    stage: deploy
    image: google/cloud-sdk:alpine
    rules:
        - if: '$CI_COMMIT_TAG =~ /\d\.\d\.\d/'
          when: manual
          allow_failure: true
    script:
        - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl
        - chmod +x ./kubectl
        - mv ./kubectl /usr/local/bin/kubectl
        - gcloud container clusters get-credentials his-cluster --region asia-east1
        - kubectl get pod -l run=totoro-cp -o yaml | sed 's/\(asia.gcr.io\/dentall-saas\/totoro-admin\):.*$/\1:'"$CI_COMMIT_TAG"'/' | kubectl replace -f -

# Notify
updateTotoroVersion:
    stage: notify
    rules:
        - if: '$CI_COMMIT_TAG =~ /^stg.*/'
          when: on_success
          allow_failure: false
          variables:
              VERSION_FILE: stg.version.json
        - if: '$CI_COMMIT_TAG =~ /\d\.\d\.\d/'
          when: on_success
          allow_failure: false
          variables:
              VERSION_FILE: rel.version.json
    image: ubuntu:16.04
    dependencies:
        - packageWebIntoWarWhenTag
    before_script:
        - apt-get update -y && apt-get install jq curl git -y
        - git config --global user.email "gitlab-auto@dentall.io"
        - git config --global user.name "gitlab-auto"
    script:
        - echo "如果你在這個 job 遇到不可言喻的錯誤，你可能會想看這個 https://docs.gitlab.com/ee/ci/yaml/README.html#rulesvariables"
        - git clone https://gitlab-ci-token:$GITLAB_TOTORO_VERSION_PRIVATE_TOKEN@gitlab.com/dentall/totoro-version.git
        - tagTimestamp=`date --iso-8601=minutes`
        - jq --arg timestamp $tagTimestamp --arg version $CI_COMMIT_TAG '.totoroAdminModifiedTime=$timestamp | .totoroAdmin=$version' totoro-version/$VERSION_FILE > new.$VERSION_FILE
        - mv new.$VERSION_FILE totoro-version/$VERSION_FILE
        - jq '.' totoro-version/$VERSION_FILE
        - cd totoro-version
        - git commit -am "Create update totoro-web $CI_COMMIT_REF_NAME version at $tagTimestamp"
        - git push
