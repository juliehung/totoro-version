cache:
    key: "$CI_PIPELINE_ID"
    paths:
        - node_modules
        - .gradle/wrapper
        - .gradle/caches

stages:
    - build
    - test
    - package
    - deploy

before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x gradlew

gradle-build:
    stage: build
    only:
        - merge_requests
    image: openjdk:8-jdk-stretch
    script:
        - ./gradlew compileJava -x check -x webpackBuildDev --no-daemon

gradle-test:
    stage: test
    only:
        - merge_requests
    image: openjdk:8-jdk-stretch
    services:
        - postgres:10.4
    variables:
        POSTGRES_DB: totoro
        POSTGRES_USER: totoro
        POSTGRES_PASSWORD: totoro
    script:
        - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/totoro ./gradlew test -x webpackBuildDev --no-daemon
    artifacts:
        paths:
            - build/reports/tests/*
            - build/jacocoHtml/*
# Uncomment following to expire the artifacts after defined period, https://docs.gitlab.com/ee/ci/yaml/README.html#artifacts-expire_in
#       expire_in: 90 day

gradle-front-test:
    stage: test
    only:
        - merge_requests
    image: openjdk:8-jre-stretch
    script:
        - apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated gcc make libpng-dev git
        - ./gradlew npm_install npm_test -PnodeInstall --no-daemon
    artifacts:
        paths:
            - build/test-results/jest/*
            - build/test-results/lcov-report/*
#       expire_in: 90 day

gradle-repackage:
    stage: package
    only:
        - master
        - merge_requests
    image: openjdk:8-jdk-stretch
    script:
        - apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated gcc make libpng-dev
        - git checkout $CI_COMMIT_REF_SLUG
        - ./gradlew bootWar -Pprod -x check -PnodeInstall --no-daemon
    artifacts:
        paths:
            - build/*
#       expire_in: 90 day

depolyGitlabRegistry:
    stage: deploy
    only:
        - master
    dependencies:
        - gradle-repackage
    image: docker
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay
    script:
        - apk add --update make nss git openjdk8-jre
        - war_path=build/libs/*.war
        - filename=$(basename $war_path .war)
        - version=${filename##*-}
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - git checkout $CI_COMMIT_REF_SLUG
        - ./gradlew -Pprod jib --image=registry.gitlab.com/dentall/totoro-admin/$CI_COMMIT_REF_SLUG:$version -Djib.to.auth.username=gitlab-ci-token -Djib.to.auth.password=$CI_JOB_TOKEN -x processResources -x compileJava -x check --no-daemon
        - ./gradlew -Pprod jib --image=registry.gitlab.com/dentall/totoro-admin/$CI_COMMIT_REF_SLUG -Djib.to.auth.username=gitlab-ci-token -Djib.to.auth.password=$CI_JOB_TOKEN -x processResources -x compileJava -x check --no-daemon

depolyCloudRun:
    stage: deploy
    only:
        - master
        - merge_requests
    environment:
        name: staging/$CI_COMMIT_REF_SLUG
        url: https://master-cloud-run-vgcfrtzwfa-uc.a.run.app
        on_stop: stopCloudRun
    when: manual
    dependencies:
        - gradle-repackage
    image: docker
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay
    script:
        # Install CA certs, openssl to https downloads, python for gcloud sdk
        - apk add --update make ca-certificates openssl python
        - update-ca-certificates
        # Write our GCP service account private key into a file
        - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        # Download and install Google Cloud SDK
        - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
        - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
        - google-cloud-sdk/bin/gcloud --quiet components update
        - google-cloud-sdk/bin/gcloud --quiet components install beta
        - google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - docker login -u _json_key --password-stdin https://us.gcr.io < ${HOME}/gcloud-service-key.json
        - war_path=build/libs/*.war
        - filename=$(basename $war_path .war)
        - version=${filename##*-}
        - cp build/libs/$filename.war docker/app.war
        - wget http://get.enterprisedb.com/postgresql/postgresql-10.6-1-linux-x64-binaries.tar.gz
        - mv postgresql-10.6-1-linux-x64-binaries.tar.gz docker
        - docker build -t us.gcr.io/$GCP_PROJECT_ID/$CI_COMMIT_REF_SLUG:$version -f docker/Dockerfile docker
        - docker push us.gcr.io/$GCP_PROJECT_ID/$CI_COMMIT_REF_SLUG:$version
        - google-cloud-sdk/bin/gcloud beta auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - google-cloud-sdk/bin/gcloud beta run deploy master-cloud-run --image us.gcr.io/$GCP_PROJECT_ID/$CI_COMMIT_REF_SLUG:$version --platform managed --region us-central1 --async --allow-unauthenticated --set-env-vars ^#^_JAVA_OPTIONS="-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Xmx${GCP_CLOUDRUN_JAVA_MEMORY:-512}m"#SPRING_PROFILES_ACTIVE="prod,embedded-postgres"#JAVA_OPTS="-Dpgembed.shared_buffers=${GCP_CLOUDRUN_PG_BUFFERS:-256} -Dpgembed.cached_path=/home/jhipster/pgembed" --memory ${GCP_CLOUDRUN_MEMORY:-2}Gi

stopCloudRun:
    stage: deploy
    only:
        - master
        - merge_requests
    environment:
        name: staging/$CI_COMMIT_REF_SLUG
        action: stop
    when: manual
    image: alpine
    script:
        # Install CA certs, openssl to https downloads, python for gcloud sdk
        - apk add --update make ca-certificates openssl python
        - update-ca-certificates
        # Write our GCP service account private key into a file
        - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        # Download and install Google Cloud SDK
        - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
        - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
        - google-cloud-sdk/bin/gcloud --quiet components update
        - google-cloud-sdk/bin/gcloud --quiet components install beta
        - google-cloud-sdk/bin/gcloud beta auth activate-service-account --key-file ${HOME}/gcloud-service-key.json --project $GCP_PROJECT_ID
        - google-cloud-sdk/bin/gcloud --quiet beta run services delete master-cloud-run --platform managed --region us-central1
