name: "Combine web and server"

on:
    workflow_call:
        inputs:
            milestone:
                type: string
                required: true
            hisGcpRegistry:
                type: string
                required: true
        outputs:
            finalFileName:
                description: "The first job output"
                value: ${{ jobs.Combine-Web-And-Server.outputs.name }}
        secrets:
            hisGcpProjectId:
                required: true
            hisGcpServiceKey:
                required: true
            totoroVersionToken:
                required: true
            totoroAdminToken:
                required: true
jobs:
    Combine-Web-And-Server:
        runs-on: ubuntu-18.04
        outputs:
          name: ${{ steps.generate-version.outputs.finalWarName}}
          version: ${{ steps.generate-version.outputs.version }}
        steps:
            - name: "Install Tool"
              run: |
                sudo apt-get update -y && \
                sudo apt-get install unzip jq -y
            - name: "Set up Cloud SDK"
              uses: google-github-actions/setup-gcloud@v0
              with:
                  project_id: ${{ secrets.hisGcpProjectId }}
                  service_account_key: ${{ secrets.hisGcpServiceKey }}
                  export_default_credentials: true
            - name: Set up JDK 8
              uses: actions/setup-java@v2
              with:
                java-version: '8'
                distribution: 'adopt-openj9'
            # Download web zip and server war
            - name: "Download latest web zip of current milestone from google storage"
              run: gsutil ls -l gs://totoro-admin-build/${{ inputs.milestone }}/web | sed '$d' | sort -k2 | tail -n 1 | awk '{ print $3 }' | xargs -I {} gsutil cp {} .
            - name: "Download latest war of current milestone from google storage"
              run: gsutil ls -l gs://totoro-admin-build/${{ inputs.milestone }}/server | sed '$d' | sort -k2 | tail -n 1 | awk '{ print $3 }' | xargs -I {} gsutil cp {} .
            - name: "Check file is downloaded"
              run: ls -a
            - name: "Generate version"
              id: generate-version
              run: |
                serverSequence=$(ls *.war | awk '{ gsub(/.war/, "", $1); split($1, a, "."); print a[3]; }')
                webSequence=$(ls *.zip | awk '{ gsub(/.ls/, "", $1); split($1, a, "."); print a[3]; }')
                finalVersion=${{ inputs.milestone }}.$webSequence.$serverSequence
                echo version=$finalVersion > totoro.properties
                echo "::set-output name=version::$finalVersion" 
                echo "::set-output name=finalWarName::$finalVersion.war" 
            # Add web zip into server war
            - name: "Unzip web and Rename to WEB-INF "
              run: |
                mkdir -p WEB-INF/classes/ && \
                ls *zip | xargs unzip -d WEB-INF/classes/ && \
                mv WEB-INF/classes/build WEB-INF/classes/public
            - name: "Move totoro properties into WEB-INF/classes"
              run: mv totoro.properties WEB-INF/classes
            - name: "Add web to war file"
              run: ls *.war | xargs -I {} jar uf {} ./WEB-INF
            - name: "Rename war file"
              run: mv *.war ${{ steps.generate-version.outputs.version }}.war
            # Push war to final
            - name: "Push download war to bucket in milestone*/final"
              run: gsutil cp ${{ steps.generate-version.outputs.finalWarName }} gs://totoro-admin-build/${{ inputs.milestone }}/final/ 
            - name: "Upload his war"
              uses: actions/upload-artifact@v2
              with:
                name: ${{ steps.generate-version.outputs.finalWarName }}
                path: ${{ steps.generate-version.outputs.finalWarName }}
            # Update totoro version
            - name: "Check out totoro version"
              uses: actions/checkout@v2
              with:
                ref: master
                repository: 'dentallio/totoro-version'
                token: ${{ secrets.totoroVersionToken }}
                path: totoro-version
            - name: "Generate history content"
              id: generate-history-content
              run: |
                ls totoro-version && \
                jq \
                --arg serverFileName $(ls *.war) \
                --arg webFileName $(ls *.zip) \
                --arg finalFileName ${{ steps.generate-version.outputs.finalWarName }} \
                --arg timestamp `date "+%Y-%m-%dT%H:%M:%SZ"` \
                '.history += [{"serverFileName": $serverFileName, "webFileName": $webFileName, "finalFileName": $finalFileName, "timestamp": $timestamp}]' \
                totoro-version/${{ inputs.milestone }}.json > tmp
            - name: "Overwrite with version file"
              run: mv tmp totoro-version/${{ inputs.milestone }}.json
            - name: "Commit totoro version"
              run: |
                cd totoro-version && \
                ls -al && \
                git config --global user.email "github-auto@dentall.io"
                git config --global user.name "github-auto"
                git commit -am "Update history with totoro admin version test, totoro web version test"
                git push

    Containerize-And-Push-To-Registry:
        needs: [ Combine-Web-And-Server ]
        runs-on: ubuntu-18.04
        steps:
          - name: "Check out totoro admin"
            uses: actions/checkout@v2
            with:
              repository: 'dentallio/totoro-admin'
              ref: release
              token: ${{ secrets.totoroAdminToken }}
              path: totoro-admin
          - name: "Download his war"
            uses: actions/download-artifact@v2
            with:
              name: ${{ needs.Combine-Web-And-Server.outputs.name }}
          - name: "Move war to docker folder"
            run: mv ${{ needs.Combine-Web-And-Server.outputs.name }} totoro-admin/src/main/docker/app.war
          - name: "Set up Cloud SDK"
            uses: google-github-actions/setup-gcloud@v0
            with:
              project_id: ${{ secrets.hisGcpProjectId }}
              service_account_key: ${{ secrets.hisGcpServiceKey }}
              export_default_credentials: true
          - name: "Configure docker to use the gcloud command-line tool as a credential helper"
            run: |
              gcloud --quiet auth configure-docker
          - name: "Build image"
            run: |
              docker pull asia.gcr.io/${{ secrets.hisGcpProjectId }}/${{ inputs.hisGcpRegistry }}:cache || true
              docker build \
              --cache-from asia.gcr.io/${{ secrets.hisGcpProjectId }}/${{ inputs.hisGcpRegistry }}:cache \
              -t asia.gcr.io/${{ secrets.hisGcpProjectId }}/${{ inputs.hisGcpRegistry }}:${{ needs.Combine-Web-And-Server.outputs.version }} \
              -t asia.gcr.io/${{ secrets.hisGcpProjectId }}/${{ inputs.hisGcpRegistry }}:cache \
              -f totoro-admin/src/main/docker/Dockerfile \
              totoro-admin/src/main/docker
          - name: "Publish image"
            run: |
              docker push asia.gcr.io/${{ secrets.hisGcpProjectId }}/${{ inputs.hisGcpRegistry }}:${{ needs.Combine-Web-And-Server.outputs.version }}
              docker push asia.gcr.io/${{ secrets.hisGcpProjectId }}/${{ inputs.hisGcpRegistry }}:cache
