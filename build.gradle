/**
 * Buildscript, for how this script can be run and where is the repo of plugins
 */
buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        google()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.2"
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

/**
 * Plugins, with official recommended style
 */
plugins {
    id "org.sonarqube" version "2.6.2"
    id "net.ltgt.apt-eclipse" version "0.18"
    id "net.ltgt.apt-idea" version "0.18"
    id "net.ltgt.apt" version "0.18"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.moowork.node" version "1.3.1"
    id "org.liquibase.gradle" version "2.0.1"
    id "com.github.ben-manes.versions" version "0.20.0"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here

    id 'checkstyle'
}

/**
 *  Plugins, with legacy style
 */
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'propdeps'
apply plugin: 'com.moowork.node'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply from: 'gradle/sonar.gradle'
apply from: 'gradle/docker.gradle'
apply from: project.hasProperty('prod') ? 'gradle/profile_prod.gradle' : 'gradle/profile_dev.gradle'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'propdeps'
apply plugin: 'com.moowork.node'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

/**
 * Constant
 */
sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'io.dentall.totoro'
project.ext.runList = !project.hasProperty('runList') ? 'main' : ''
project.ext.diffChangelogFile = 'src/main/resources/config/liquibase/changelog/' + new Date().format('yyyyMMddHHmmss') + '_changelog.xml'
assert System.properties['java.specification.version'] == '1.8'

def versionMajor = 0
def versionMinor = 0
def versionMinorRenewDate = "2019-05-27"
def branchName = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
def commitCount = "git rev-list $branchName --count --since=$versionMinorRenewDate".execute().text.trim()
def semver = "$versionMajor.$versionMinor.$commitCount-$branchName"
def gitTag = "git describe --tags".execute().text.trim()
def sha1 = "git show --pretty=tformat:%h --quiet".execute().text.trim()
description = ''

/**
 * Configuration for plugins
 */
node {
    version = "${node_version}"
    npmVersion = "${npm_version}"
    yarnVersion = "${yarn_version}"
    download = true
    nodeModulesDir = file("${project.projectDir}/web")
}

checkstyle {
    configFile = file("${configDir}/google_checks.xml")
    toolVersion = '8.23'
    maxWarnings = 0
    sourceSets = [project.sourceSets.main]
}

springBoot {
    mainClassName = 'io.dentall.totoro.TotoroApp'
    buildInfo()
}

liquibase {
    activities {
        main {
            driver 'org.postgresql.Driver'
            url 'jdbc:postgresql://localhost:5432/totoro'
            username 'totoro'
            password 'totoro'
            changeLogFile 'src/main/resources/config/liquibase/master.xml'
            defaultSchemaName ''
            logLevel 'debug'
            classpath 'src/main/resources/'
        }

        migration {
            driver 'org.postgresql.Driver'
            url 'jdbc:postgresql://localhost:5432/totoro'
            username 'totoro'
            password 'totoro'
            changeLogFile 'migration/migration_master.xml'
            defaultSchemaName ''
            logLevel 'debug'
            classpath 'src/main/resources/'
        }

        diffLog {
            driver 'org.h2.Driver'
            url 'jdbc:h2:file:./target/h2db/db/totoro'
            username 'totoro'
            password ''
            changeLogFile project.ext.diffChangelogFile
            referenceUrl 'hibernate:spring:io.dentall.totoro.domain?dialect=org.hibernate.dialect.H2Dialect&amp;hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&amp;hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
            defaultSchemaName ''
            logLevel 'debug'
            classpath 'src/main/resources/'
        }
    }

    runList = project.ext.runList
}

configurations {
    providedRuntime
    compile.exclude module: "spring-boot-starter-tomcat"
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://jcenter.bintray.com/" }
}

/**
 * Tasks
 */
dependencyManagement {
    imports {
        mavenBom "io.github.jhipster:jhipster-dependencies:${jhipster_dependencies_version}"
        //jhipster-needle-gradle-dependency-management - JHipster will add additional dependencies management here
    }
}


task xbuild(type: Exec) {
    commandLine './gradlew', 'build', '-x', 'webpackBuildDev', '-x', 'npm_install', '-x', 'test'
}

bootWar {
    mainClassName = 'io.dentall.totoro.TotoroApp'

    if (!project.hasProperty('gae')) {
        if (!gitTag.isEmpty()) {
            archiveName = "$baseName-$gitTag-$sha1.$extension"
        } else {
            archiveName = "$baseName-$branchName-$sha1.$extension"
        }
    }
}

war {

}

task autoGenVersion(type: WriteProperties) {
    outputFile = file("src/main/resources/totoro.properties")
    if (!gitTag.isEmpty()) {
        property("version", "$gitTag-$sha1")
    } else {
        property("version", "$branchName-$sha1")
    }
}

// https://stackoverflow.com/questions/40037487/the-filename-or-extension-is-too-long-error-using-gradle
task classpathJar(type: Jar) {
    dependsOn configurations.runtime
    appendix = 'classpath'

    doFirst {
        manifest {
            attributes 'Class-Path': configurations.runtime.files.collect {
                it.toURI().toURL().toString().replaceFirst(/file:\/+/, '/').replaceAll(' ', '%20')
            }.join(' ')
        }
    }
}

bootRun {
    dependsOn classpathJar
    doFirst {
        classpath = files("$buildDir/classes/java/main", "$buildDir/resources/main", classpathJar.archivePath)
    }
}

test {
    if (project.hasProperty('testFtp')) {
        exclude '**/CucumberTest*'
    } else {
        exclude '**/CucumberTest*', 'io/dentall/totoro/business/service/ImageFtpBusinessServiceIntTest.class'
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task cleanResources(type: Delete) {
    delete 'build/resources'
}

wrapper {
    gradleVersion = '4.10.3'
}

task stage(dependsOn: 'bootWar') {
}

/**
 * Application dependencies
 **/
dependencies {
    // Use ", version: jhipster_dependencies_version, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    compile group: "io.github.jhipster", name: "jhipster-framework", version: "${jhipster_dependencies_version}"
    compile "org.springframework.boot:spring-boot-starter-cache"
    compile "net.logstash.logback:logstash-logback-encoder"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc:${com_fasterxml_jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${com_fasterxml_jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:${com_fasterxml_jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-core:${com_fasterxml_jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${com_fasterxml_jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-databind:${com_fasterxml_jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:${com_fasterxml_jackson_version}"
    compile "com.ryantenney.metrics:metrics-spring"
    compile "javax.cache:cache-api"
    compile "org.hibernate:hibernate-core"
    compile "com.zaxxer:HikariCP"
    compile "org.apache.commons:commons-lang3"
    compile "commons-io:commons-io"
    compile "javax.transaction:javax.transaction-api"
    compile "org.ehcache:ehcache"
    compile "org.hibernate:hibernate-jcache"
    compile "org.hibernate:hibernate-entitymanager"
    compile "org.hibernate:hibernate-envers"
    compile "org.hibernate.validator:hibernate-validator"
    compile "org.liquibase:liquibase-core"
    compile "com.mattbertolini:liquibase-slf4j"
    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
    liquibaseRuntime sourceSets.main.compileClasspath
    compile "org.springframework.boot:spring-boot-loader-tools"
    compile "org.springframework.boot:spring-boot-starter-mail"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.zalando:problem-spring-web:0.24.0-RC.0"
    compile "org.springframework.cloud:spring-cloud-spring-service-connector"
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security:spring-security-data"
    compile "org.springframework.security:spring-security-web"
    compile "io.jsonwebtoken:jjwt-api"
    runtime "io.jsonwebtoken:jjwt-impl"
    runtime "io.jsonwebtoken:jjwt-jackson"
    compile("io.springfox:springfox-swagger2") {
        exclude module: 'mapstruct'
    }
    compile "io.springfox:springfox-bean-validators"
    compile "org.postgresql:postgresql"
    liquibaseRuntime "org.postgresql:postgresql"
    compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen"
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    compile "com.google.apis:google-api-services-calendar:${google_calendar_version}"
    testCompile "com.jayway.jsonpath:json-path"
    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testCompile "org.springframework.security:spring-security-test"
    testCompile "org.springframework.boot:spring-boot-test"
    testCompile "org.assertj:assertj-core"
    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core"
    testCompile "com.mattbertolini:liquibase-slf4j"
    testCompile "org.hamcrest:hamcrest-library"
    testCompile "com.h2database:h2"
    testCompile 'io.cucumber:cucumber-java:6.8.1'
    testCompile 'io.cucumber:cucumber-junit:6.8.1'
    testCompile 'io.cucumber:cucumber-spring:6.8.1'
    testCompile 'de.monochromata.cucumber:reporting-plugin:4.0.103'

    liquibaseRuntime "com.h2database:h2"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here

    compile "com.vladmihalcea:hibernate-types-52:2.4.0"
    compile "ru.yandex.qatools.embed:postgresql-embedded:2.10"
    compile "com.univocity:univocity-parsers:2.8.2"
    compile("org.springframework.integration:spring-integration-mqtt") {
        exclude group: 'org.eclipse.paho', module: 'org.eclipse.paho.client.mqttv3'
    }
    compile "org.springframework.boot:spring-boot-starter-artemis"
    compile "org.apache.activemq:artemis-jms-server"
    compile "org.apache.activemq:artemis-mqtt-protocol:2.4.0"
    compile "org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5"
    compile "io.netty:netty-codec-mqtt:4.1.51.Final" //4.1.52.Final ~ 4.1.58.Final會造成本機測試收不到訊息

    // https://mvnrepository.com/artifact/commons-net/commons-net
    compile group: 'commons-net', name: 'commons-net', version: '3.6'

    testCompile "org.mockftpserver:MockFtpServer:2.7.1"
    compile "net.coobird:thumbnailator:0.4.9"
    runtime "com.google.cloud.sql:postgres-socket-factory:1.0.15"
    compile "com.google.cloud:google-cloud-storage:1.105.1"
    compile "com.google.auth:google-auth-library-oauth2-http:0.20.0"
    compile 'com.google.cloud:sqlcommenter:1.0.0'
    compile 'io.micrometer:micrometer-core:1.5.5'
    compile 'io.micrometer:micrometer-registry-prometheus:1.5.0'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'
    testCompileOnly 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

    // POI
    implementation group: 'org.apache.poi', name: 'poi', version: '5.0.0'
}

task cucumber_nhi_rule() {
    def cucumberTags = project.getProperties().get("cucumber.filter.tags", "@nhi")
    dependsOn assemble, testClasses
    doLast {
        assert cucumberTags.length() > 0
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'html:build/reports/cucumber/cucumber.html', '--plugin', 'de.monochromata.cucumber.report.PrettyReports:build/reports/cucumber', '--glue', 'io.dentall.totoro.step_definitions', 'src/test/java/io/dentall/totoro/features']
            environment = ['spring.profiles.active': 'test,no-swagger,embedded-postgres,no-async-liquibase', 'spring.liquibase.change-log': 'classpath:config/liquibase/master.xml', 'cucumber.filter.tags': "${cucumberTags}"]
        }
    }
}

task cucumber_metric() {
    def cucumberTags = project.getProperties().get("cucumber.filter.tags", "@metric")
    dependsOn assemble, testClasses
    doLast {
        assert cucumberTags.length() > 0
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'html:build/reports/cucumber/cucumber-metric.html', '--plugin', 'de.monochromata.cucumber.report.PrettyReports:build/reports/cucumber/cucumber-metric', '--glue', 'io.dentall.totoro.step_definitions.metric', 'src/test/java/io/dentall/totoro/features/metric']
            environment = ['cucumber.filter.tags': "${cucumberTags}"]
        }
    }
}

/**
 * Execute flow
 */
defaultTasks 'bootRun'
compileJava.dependsOn processResources
processResources.dependsOn cleanResources, bootBuildInfo, autoGenVersion
bootBuildInfo.mustRunAfter cleanResources
checkstyleMain.include 'io/dentall/totoro/business/**'
checkstyleMain.exclude 'io/dentall/totoro/business/service/nhi/util/**'
checkstyleMain.exclude 'io/dentall/totoro/repository'
compileJava.finalizedBy checkstyleMain
test.finalizedBy testReport, jacocoTestReport
